<?php

namespace BlogBundle\Repository;

use Doctrine\ORM\EntityRepository;
use BlogBundle\Entity\Post;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query;

use Doctrine\ORM\QueryBuilder;



/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{


    public function findPostByid($id)
    {
        try {
            return $this->getEntityManager()
                ->createQuery(
                    "SELECT p
                FROM BlogBundle:Post
                p WHERE p.id =:id"
                )
                ->setParameter('id', $id)
                ->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
        }
    }







    

    public function cherchertitre($str){
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p
                FROM BlogBundle:Post p
                WHERE p.title LIKE :str'

            )
            ->setParameter('str', '%'.$str.'%')
            ->getResult();
    }



    public function chercherdescription($str){
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p
                    FROM BlogBundle:Post p
                    WHERE p.description LIKE :str'
    
            )
            ->setParameter('str', '%'.$str.'%')
            ->getResult();
    }



    public function chercherdate($str)
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p
                FROM BlogBundle:Post p
                WHERE p.postdate LIKE :str'
            )
            ->setParameter('str', '%'.$str.'%')
            ->getResult();
    }


    
    public function finddescpost()
    {
        return $this->getEntityManager()
            ->createQuery(
                'SELECT p
                FROM BlogBundle:Post p
                order by p.postdate desc'
            )

            ->getResult();
    }

  












    public function nbrpost()
    {

        $qb = $this->createQueryBuilder('post')
        ->select('count(post.id)');
        return $qb->getQuery()
                  ->getSingleScalarResult();

    }



   public function rechercheActive($recherche)
   
    {
        $qb = $this->createQueryBuilder('a')
            ->addSelect('a')
            ->where('a.title like :query or a.description like :query or a.rating like :query')
            ->setParameter('query','%'.$recherche.'%')
        ;
        return $qb->getQuery()
            ->getResult();

    }


    public function rechercheActive11($recherche)
    {
        $qb = $this->createQueryBuilder('a')
            ->addSelect('a')
            ->where('a.title like :query or a.description like :query or a.rating like :query')
            ->setParameter('query','%'.$recherche.'%')
        ;
        return $qb->getQuery()
            ->getResult();
    }


    public function recherche($recherche)
    {
        $qb = $this->createQueryBuilder('post')
            ->Select('post')
            ->where('post.rating like \'2\'')
            //->setParameter('query','%'.$recherche.'%')
        ;
        return $qb->getQuery()
            ->getResult();
    }








}
